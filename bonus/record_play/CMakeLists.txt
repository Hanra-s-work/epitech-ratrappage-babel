cmake_minimum_required(VERSION 3.28)
project(babel_client VERSION 1.0.0)

# Set the C++ standard
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Output directory for binaries (primary: bin folder)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/bin)

# Secondary output directory: source folder
set(SECONDARY_OUTPUT_DIR ${CMAKE_SOURCE_DIR})

# Create the Build and Bin directories if they do not exist
file(MAKE_DIRECTORY ${CMAKE_SOURCE_DIR}/build)
file(MAKE_DIRECTORY ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})
file(MAKE_DIRECTORY ${SECONDARY_OUTPUT_DIR})

# Set the source files
set(SOURCES

    # Files at the source of the program
    src/Main.cpp
    src/RealMain.cpp
    src/MainClass.cpp
    src/TOMLLoader.cpp
    src/HelpFunctions.cpp

    # Audio manager
    src/Audio/Player.cpp
    src/Audio/Network.cpp
    src/Audio/Manager.cpp
    src/Audio/Recorder.cpp
    src/Audio/Compressor.cpp

    # User Control Manager
    src/Controls/UserControls.cpp
    src/Controls/ThreadCapsule.cpp

    # Custom exceptions
    src/CustomExceptions/No.cpp
    src/CustomExceptions/Found.cpp
    src/CustomExceptions/Failed.cpp
    src/CustomExceptions/Invalid.cpp
    src/CustomExceptions/Unknown.cpp
    src/CustomExceptions/NotFound.cpp

    # Custom logging library
    src/Logging/Log.cpp

    # Network manager
    src/Network/Manager.cpp
    src/Network/AddressHolder.cpp

    # Custom rebinds
    src/Recoded/ToString.cpp
)

# Define the name of the executable that will be generated by the project
add_executable(${PROJECT_NAME} ${SOURCES})

# Include directories for headers
target_include_directories(${PROJECT_NAME} PRIVATE ${CMAKE_CURRENT_LIST_DIR}/include)

# Include the CMakeLists.txt from the Lib folder
add_subdirectory(${CMAKE_CURRENT_LIST_DIR}/lib)

# Check for threads
set(THREADS_PREFER_PTHREAD_FLAG ON)
find_package(Threads REQUIRED)

# Link required libraries (asio + toml++ + Opus + PortAudio)
target_link_libraries(${PROJECT_NAME}
    PRIVATE
    babel_libraries
    Threads::Threads
)

# Enable debug mode
if(CMAKE_BUILD_TYPE STREQUAL "Debug")
    message(STATUS "Debug mode detected: Compiling with debug flags")
    target_compile_options(${PROJECT_NAME} PRIVATE -g3)
endif()

# Custom target to clean build artifacts
add_custom_target(fclean
    COMMAND ${CMAKE_COMMAND} -E remove_directory ${CMAKE_BINARY_DIR}
    COMMENT "Removing all build artifacts and directories"
)

# Add a post-build step to copy binaries to the secondary location
add_custom_target(copy_binaries ALL
    COMMAND ${CMAKE_COMMAND} -E copy_directory
    ${CMAKE_RUNTIME_OUTPUT_DIRECTORY} ${SECONDARY_OUTPUT_DIR}
    DEPENDS ${PROJECT_NAME}
)

# Ensure the custom target depends on all subdirectories
# This is now safe to do after defining the targets.
add_dependencies(copy_binaries ${PROJECT_NAME})
